{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,SAAUC,SAASC,cAAc,uBACjCC,QAASF,SAASC,cAAc,sBAChCE,UAAWH,SAASC,cAAc,wBAClCG,QAASJ,SAASC,cAAc,UA8BlC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IArCPT,EAAKM,QAAQW,iBAAiB,UAE9B,SAAsBC,GACpBA,EAAIC,iBAOJ,IALA,IAAIC,EAAQC,OAAOrB,EAAKC,SAASqB,OAC7BC,EAAOF,OAAOrB,EAAKI,QAAQkB,OAC3BE,EAASH,OAAOrB,EAAKK,UAAUiB,OAC/BG,EAAW,EAENC,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAChCnB,EAAckB,EAAUL,GACrBO,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDwB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBoB,EAAA/B,GAASgC,OAAOI,QACd,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDgB,GAAY,EACZL,GAAgBG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delayRef: document.querySelector('input[name=\"delay\"]'),\n  stepRef: document.querySelector('input[name=\"step\"]'),\n  amountRef: document.querySelector('input[name=\"amount\"]'),\n  formRef: document.querySelector('.form'),\n};\n\nrefs.formRef.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  let delay = Number(refs.delayRef.value);\n  let step = Number(refs.stepRef.value);\n  let amount = Number(refs.amountRef.value);\n  let position = 1;\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    position += 1;\n    delay = delay + step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","delayRef","document","querySelector","stepRef","amountRef","formRef","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","delay1","Number","value","step","amount","position1","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.01fe0e87.js.map"}
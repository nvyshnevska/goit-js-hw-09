{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,SAAUC,SAASC,cAAc,uBACjCC,QAASF,SAASC,cAAc,sBAChCE,UAAWH,SAASC,cAAc,wBAClCG,QAASJ,SAASC,cAAc,UAmClC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA1CbT,EAAKM,QAAQW,iBAAiB,UAE9B,SAAsBC,GACpBA,EAAIC,iBAEJ,IAAIC,EAAQC,OAAOrB,EAAKC,SAASqB,OAC7BC,EAAOF,OAAOrB,EAAKI,QAAQkB,OAC3BE,EAASH,OAAOrB,EAAKK,UAAUiB,OAC/BG,EAAW,EAEf,GAAIL,EAAQ,GAAKG,EAAO,EAEtB,YADAG,EAAA5B,GAAS6B,OAAOC,QAAQ,mCAGxB,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EAChCtB,EAAckB,EAAUL,GACrBU,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBiB,EAAA5B,GAAS6B,OAAOI,QACd,uBAAqBvB,QAAiBC,MAAU,IAGnDuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBiB,EAAA5B,GAAS6B,OAAOC,QACd,sBAAoBpB,QAAeC,MAAU,IAGnDgB,GAAY,EACZL,GAAgBG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delayRef: document.querySelector('input[name=\"delay\"]'),\n  stepRef: document.querySelector('input[name=\"step\"]'),\n  amountRef: document.querySelector('input[name=\"amount\"]'),\n  formRef: document.querySelector('.form'),\n};\n\nrefs.formRef.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  let delay = Number(refs.delayRef.value);\n  let step = Number(refs.stepRef.value);\n  let amount = Number(refs.amountRef.value);\n  let position = 1;\n\n  if (delay < 0 || step < 0) {\n    Notiflix.Notify.failure('Value must be a positive number');\n    return;\n  } else {\n    for (let i = 1; i <= amount; i += 1) {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n      position += 1;\n      delay = delay + step;\n    }\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","delayRef","document","querySelector","stepRef","amountRef","formRef","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","delay1","Number","value","step","amount","position1","$parcel$interopDefault","Notify","failure","i","then","success","catch"],"version":3,"file":"03-promises.e975385e.js.map"}